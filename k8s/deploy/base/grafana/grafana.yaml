---
# Source: grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: "grafana"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-8.2.28
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: grafana-admin
  - name: grafana-datasources
automountServiceAccountToken: false
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-envvars
  namespace: "grafana"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-8.2.28
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
data:
  GF_SECURITY_ADMIN_USER: "admin"
  GF_INSTALL_PLUGINS: ""
  GF_PATHS_PLUGINS: "/opt/bitnami/grafana/data/plugins"
  GF_AUTH_LDAP_ENABLED: "false"
  GF_AUTH_LDAP_CONFIG_FILE: "/opt/bitnami/grafana/conf/ldap.toml"
  GF_AUTH_LDAP_ALLOW_SIGN_UP: "false"
  GF_PATHS_PROVISIONING: "/opt/bitnami/grafana/conf/provisioning"
  GF_PATHS_CONFIG: "/opt/bitnami/grafana/conf/grafana.ini"
  GF_PATHS_DATA: "/opt/bitnami/grafana/data"
  GF_PATHS_LOGS: "/opt/bitnami/grafana/logs"
---
# Source: grafana/templates/dashboard-provider.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provider
  namespace: "grafana"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-8.2.28
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
data:
  default-provider.yaml: |-
    apiVersion: 1

    providers:
      # <string> an unique provider name
    - name: 'default-provider'
      # <int> org id. will default to orgId 1 if not specified
      orgId: 1
      # <string, required> name of the dashboard folder. Required
      folder: dashboards
      # <string> folder UID. will be automatically generated if not specified
      folderUid: ''
      # <string, required> provider type. Required
      type: file
      # <bool> disable dashboard deletion
      disableDeletion: false
      # <bool> enable dashboard editing
      editable: true
      # <int> how often Grafana will scan for changed dashboards
      updateIntervalSeconds: 10
      options:
        # <string, required> path to dashboard files on disk. Required
        path: /opt/bitnami/grafana/dashboards
        # <bool> enable folders creation for dashboards
        #foldersFromFilesStructure: true
---
# Source: grafana/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: grafana
  namespace: "grafana"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-8.2.28
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: "grafana"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-8.2.28
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - port: 3000
      targetPort: dashboard
      protocol: TCP
      name: http
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/component: grafana
---
# Source: grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: "grafana"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-8.2.28
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/component: grafana
  strategy: 
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        helm.sh/chart: grafana-8.2.28
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: grafana
      annotations:
        checksum/config: 8551d99cc06332e7bb76afd56e94447bf6cf11c63ae5753a7b28742dc483ff4e
        checksum/dashboard-provider: 9e592400d84a449221d266a622b1f2b7e00cf54dc94215f420649a3d8f472e23
    spec:
      
      serviceAccountName: grafana
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana
                    app.kubernetes.io/instance: grafana
                    app.kubernetes.io/component: grafana
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      initContainers:
      containers:
        - name: grafana
          image: docker.io/bitnami/grafana:9.3.6-debian-11-r11
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
          envFrom:
            - configMapRef:
                name: grafana-envvars
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-password
                  key: password
          volumeMounts:
            - name: data
              mountPath: /opt/bitnami/grafana/data
            - name: dashboards-provider
              mountPath: /opt/bitnami/grafana/conf/provisioning/dashboards
            - name: dashboard-kubernetes
              mountPath: /opt/bitnami/grafana/dashboards/kubernetes.json
              subPath: kubernetes.json
            - name: dashboard-jvm
              mountPath: /opt/bitnami/grafana/dashboards/jvm.json
              subPath: jvm.json
            - name: dashboard-postgresql
              mountPath: /opt/bitnami/grafana/dashboards/postgresql.json
              subPath: postgresql.json
            - name: dashboard-kube-state-metrics
              mountPath: /opt/bitnami/grafana/dashboards/kube-state-metrics.json
              subPath: kube-state-metrics.json
            - name: datasources
              mountPath: /opt/bitnami/grafana/conf/provisioning/datasources
          ports:
            - name: dashboard
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/health
              port: dashboard
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /api/health
              port: dashboard
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: grafana
        - name: dashboards-provider
          configMap:
            name: grafana-provider
        - name: dashboard-kubernetes
          configMap:
            name: dashboard-kubernetes
        - name: dashboard-jvm
          configMap:
            name: dashboard-jvm
        - name: dashboard-postgresql
          configMap:
            name: dashboard-postgresql
        - name: dashboard-kube-state-metrics
          configMap:
            name: dashboard-kube-state-metrics
        - name: datasources
          secret:
            secretName: grafana-datasources
